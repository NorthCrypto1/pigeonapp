{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Dell\\\\messenger\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\Dell\\\\messenger\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\Dell\\\\messenger\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\Dell\\\\messenger\\\\src\\\\messenger-page\\\\selectUser.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Select from 'react-select';\nimport { emphasize, makeStyles, useTheme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Chip from '@material-ui/core/Chip';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport CancelIcon from '@material-ui/icons/Cancel';\nconst suggestions = [{\n  label: 'NeonNexus'\n}, {\n  label: 'Peristeri'\n}, {\n  label: 'KenBot'\n}, {\n  label: 'NickKliesen'\n}, {\n  label: 'Cryptomaniac'\n}, {\n  label: 'ShadowHunter117'\n}, {\n  label: 'bztianjiao'\n}];\n\nfunction renderInputComponent(inputProps) {\n  const classes = inputProps.classes,\n        _inputProps$inputRef = inputProps.inputRef,\n        inputRef = _inputProps$inputRef === void 0 ? () => {} : _inputProps$inputRef,\n        ref = inputProps.ref,\n        other = _objectWithoutProperties(inputProps, [\"classes\", \"inputRef\", \"ref\"]);\n\n  return React.createElement(TextField, Object.assign({\n    fullWidth: true,\n    InputProps: {\n      inputRef: node => {\n        ref(node);\n        inputRef(node);\n      },\n      classes: {\n        input: classes.input\n      }\n    }\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }));\n}\n\nfunction renderSuggestion(suggestion, {\n  query,\n  isHighlighted\n}) {\n  const matches = match(suggestion.label, query);\n  const parts = parse(suggestion.label, matches);\n  return React.createElement(MenuItem, {\n    selected: isHighlighted,\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, parts.map(part => React.createElement(\"span\", {\n    key: part.text,\n    style: {\n      fontWeight: part.highlight ? 500 : 400\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, part.text))));\n}\n\nfunction getSuggestions(value) {\n  const inputValue = deburr(value.trim()).toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n  return inputLength === 0 ? [] : suggestions.filter(suggestion => {\n    const keep = count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n    if (keep) {\n      count += 1;\n    }\n\n    return keep;\n  });\n}\n\nfunction getSuggestionValue(suggestion) {\n  return suggestion.label;\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    height: 250,\n    flexGrow: 1\n  },\n  container: {\n    position: 'relative'\n  },\n  suggestionsContainerOpen: {\n    position: 'absolute',\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0\n  },\n  suggestion: {\n    display: 'block'\n  },\n  suggestionsList: {\n    margin: 0,\n    padding: 0,\n    listStyleType: 'none'\n  },\n  divider: {\n    height: theme.spacing(2)\n  }\n}));\nexport default function IntegrationAutosuggest() {\n  const classes = useStyles();\n\n  const _React$useState = React.useState(null),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        anchorEl = _React$useState2[0],\n        setAnchorEl = _React$useState2[1];\n\n  const _React$useState3 = React.useState({\n    single: '',\n    popper: ''\n  }),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        state = _React$useState4[0],\n        setState = _React$useState4[1];\n\n  const _React$useState5 = React.useState([]),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        stateSuggestions = _React$useState6[0],\n        setSuggestions = _React$useState6[1];\n\n  const handleSuggestionsFetchRequested = ({\n    value\n  }) => {\n    setSuggestions(getSuggestions(value));\n  };\n\n  const handleSuggestionsClearRequested = () => {\n    setSuggestions([]);\n  };\n\n  const handleChange = name => (event, {\n    newValue\n  }) => {\n    setState(_objectSpread({}, state, {\n      [name]: newValue\n    }));\n  };\n\n  const autosuggestProps = {\n    renderInputComponent,\n    suggestions: stateSuggestions,\n    onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\n    onSuggestionsClearRequested: handleSuggestionsClearRequested,\n    getSuggestionValue,\n    renderSuggestion\n  };\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(Autosuggest, Object.assign({}, autosuggestProps, {\n    inputProps: {\n      classes,\n      id: 'react-autosuggest-simple',\n      label: 'Country',\n      placeholder: 'Search a country (start with a)',\n      value: state.single,\n      onChange: handleChange('single')\n    },\n    theme: {\n      container: classes.container,\n      suggestionsContainerOpen: classes.suggestionsContainerOpen,\n      suggestionsList: classes.suggestionsList,\n      suggestion: classes.suggestion\n    },\n    renderSuggestionsContainer: options => React.createElement(Paper, Object.assign({}, options.containerProps, {\n      square: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), options.children),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: classes.divider,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }), React.createElement(Autosuggest, Object.assign({}, autosuggestProps, {\n    inputProps: {\n      classes,\n      id: 'react-autosuggest-popper',\n      label: 'Country',\n      placeholder: 'With Popper',\n      value: state.popper,\n      onChange: handleChange('popper'),\n      inputRef: node => {\n        setAnchorEl(node);\n      },\n      InputLabelProps: {\n        shrink: true\n      }\n    },\n    theme: {\n      suggestionsList: classes.suggestionsList,\n      suggestion: classes.suggestion\n    },\n    renderSuggestionsContainer: options => React.createElement(Popper, {\n      anchorEl: anchorEl,\n      open: Boolean(options.children),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(Paper, Object.assign({\n      square: true\n    }, options.containerProps, {\n      style: {\n        width: anchorEl ? anchorEl.clientWidth : undefined\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), options.children)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["C:\\Users\\Dell\\messenger\\src\\messenger-page\\selectUser.js"],"names":["React","PropTypes","clsx","Select","emphasize","makeStyles","useTheme","Typography","NoSsr","TextField","Paper","Chip","MenuItem","CancelIcon","suggestions","label","renderInputComponent","inputProps","classes","inputRef","ref","other","node","input","renderSuggestion","suggestion","query","isHighlighted","matches","match","parts","parse","map","part","text","fontWeight","highlight","getSuggestions","value","inputValue","deburr","trim","toLowerCase","inputLength","length","count","filter","keep","slice","getSuggestionValue","useStyles","theme","root","height","flexGrow","container","position","suggestionsContainerOpen","zIndex","marginTop","spacing","left","right","display","suggestionsList","margin","padding","listStyleType","divider","IntegrationAutosuggest","useState","anchorEl","setAnchorEl","single","popper","state","setState","stateSuggestions","setSuggestions","handleSuggestionsFetchRequested","handleSuggestionsClearRequested","handleChange","name","event","newValue","autosuggestProps","onSuggestionsFetchRequested","onSuggestionsClearRequested","id","placeholder","onChange","options","containerProps","children","InputLabelProps","shrink","Boolean","width","clientWidth","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport Select from 'react-select';\r\nimport { emphasize, makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport NoSsr from '@material-ui/core/NoSsr';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\n\r\nconst suggestions = [\r\n    { label: 'NeonNexus' },\r\n    { label: 'Peristeri' },\r\n    { label: 'KenBot' },\r\n    { label: 'NickKliesen' },\r\n    { label: 'Cryptomaniac' },\r\n    { label: 'ShadowHunter117' },\r\n    { label: 'bztianjiao' },\r\n]\r\nfunction renderInputComponent(inputProps) {\r\n    const { classes, inputRef = () => { }, ref, ...other } = inputProps;\r\n\r\n    return (\r\n        <TextField\r\n            fullWidth\r\n            InputProps={{\r\n                inputRef: node => {\r\n                    ref(node);\r\n                    inputRef(node);\r\n                },\r\n                classes: {\r\n                    input: classes.input,\r\n                },\r\n            }}\r\n            {...other}\r\n        />\r\n    );\r\n}\r\n\r\nfunction renderSuggestion(suggestion, { query, isHighlighted }) {\r\n    const matches = match(suggestion.label, query);\r\n    const parts = parse(suggestion.label, matches);\r\n\r\n    return (\r\n        <MenuItem selected={isHighlighted} component=\"div\">\r\n            <div>\r\n                {parts.map(part => (\r\n                    <span key={part.text} style={{ fontWeight: part.highlight ? 500 : 400 }}>\r\n                        {part.text}\r\n                    </span>\r\n                ))}\r\n            </div>\r\n        </MenuItem>\r\n    );\r\n}\r\n\r\nfunction getSuggestions(value) {\r\n    const inputValue = deburr(value.trim()).toLowerCase();\r\n    const inputLength = inputValue.length;\r\n    let count = 0;\r\n\r\n    return inputLength === 0\r\n        ? []\r\n        : suggestions.filter(suggestion => {\r\n            const keep =\r\n                count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\r\n\r\n            if (keep) {\r\n                count += 1;\r\n            }\r\n\r\n            return keep;\r\n        });\r\n}\r\n\r\nfunction getSuggestionValue(suggestion) {\r\n    return suggestion.label;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        height: 250,\r\n        flexGrow: 1,\r\n    },\r\n    container: {\r\n        position: 'relative',\r\n    },\r\n    suggestionsContainerOpen: {\r\n        position: 'absolute',\r\n        zIndex: 1,\r\n        marginTop: theme.spacing(1),\r\n        left: 0,\r\n        right: 0,\r\n    },\r\n    suggestion: {\r\n        display: 'block',\r\n    },\r\n    suggestionsList: {\r\n        margin: 0,\r\n        padding: 0,\r\n        listStyleType: 'none',\r\n    },\r\n    divider: {\r\n        height: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nexport default function IntegrationAutosuggest() {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [state, setState] = React.useState({\r\n        single: '',\r\n        popper: '',\r\n    });\r\n\r\n    const [stateSuggestions, setSuggestions] = React.useState([]);\r\n\r\n    const handleSuggestionsFetchRequested = ({ value }) => {\r\n        setSuggestions(getSuggestions(value));\r\n    };\r\n\r\n    const handleSuggestionsClearRequested = () => {\r\n        setSuggestions([]);\r\n    };\r\n\r\n    const handleChange = name => (event, { newValue }) => {\r\n        setState({\r\n            ...state,\r\n            [name]: newValue,\r\n        });\r\n    };\r\n\r\n    const autosuggestProps = {\r\n        renderInputComponent,\r\n        suggestions: stateSuggestions,\r\n        onSuggestionsFetchRequested: handleSuggestionsFetchRequested,\r\n        onSuggestionsClearRequested: handleSuggestionsClearRequested,\r\n        getSuggestionValue,\r\n        renderSuggestion,\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Autosuggest\r\n                {...autosuggestProps}\r\n                inputProps={{\r\n                    classes,\r\n                    id: 'react-autosuggest-simple',\r\n                    label: 'Country',\r\n                    placeholder: 'Search a country (start with a)',\r\n                    value: state.single,\r\n                    onChange: handleChange('single'),\r\n                }}\r\n                theme={{\r\n                    container: classes.container,\r\n                    suggestionsContainerOpen: classes.suggestionsContainerOpen,\r\n                    suggestionsList: classes.suggestionsList,\r\n                    suggestion: classes.suggestion,\r\n                }}\r\n                renderSuggestionsContainer={options => (\r\n                    <Paper {...options.containerProps} square>\r\n                        {options.children}\r\n                    </Paper>\r\n                )}\r\n            />\r\n            <div className={classes.divider} />\r\n            <Autosuggest\r\n                {...autosuggestProps}\r\n                inputProps={{\r\n                    classes,\r\n                    id: 'react-autosuggest-popper',\r\n                    label: 'Country',\r\n                    placeholder: 'With Popper',\r\n                    value: state.popper,\r\n                    onChange: handleChange('popper'),\r\n                    inputRef: node => {\r\n                        setAnchorEl(node);\r\n                    },\r\n                    InputLabelProps: {\r\n                        shrink: true,\r\n                    },\r\n                }}\r\n                theme={{\r\n                    suggestionsList: classes.suggestionsList,\r\n                    suggestion: classes.suggestion,\r\n                }}\r\n                renderSuggestionsContainer={options => (\r\n                    <Popper anchorEl={anchorEl} open={Boolean(options.children)}>\r\n                        <Paper\r\n                            square\r\n                            {...options.containerProps}\r\n                            style={{ width: anchorEl ? anchorEl.clientWidth : undefined }}\r\n                        >\r\n                            {options.children}\r\n                        </Paper>\r\n                    </Popper>\r\n                )}\r\n            />\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}