{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Dell\\\\messenger\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\Dell\\\\messenger\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Dell\\\\messenger\\\\src\\\\profile-page\\\\profile.js\";\nimport React from \"react\";\nimport './profile.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport List from '@material-ui/core/List';\nimport clsx from 'clsx';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport IconButton from '@material-ui/core/IconButton';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Switch from '@material-ui/core/Switch';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: 'auto',\n    width: '300px',\n    [theme.breakpoints.up('md')]: {\n      width: '500px'\n    },\n    [theme.breakpoints.up('lg')]: {\n      width: '800px'\n    }\n  },\n  list: {\n    display: 'flex',\n    flexDirection: 'column',\n    width: '100%',\n    maxWidth: '300px',\n    [theme.breakpoints.up('md')]: {\n      maxWidth: '500px'\n    },\n    [theme.breakpoints.up('lg')]: {\n      maxWidth: '800px'\n    }\n  },\n  listOpen: {\n    display: 'flex',\n    flexDirection: 'row',\n    width: '100%',\n    maxWidth: '300px',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    [theme.breakpoints.up('md')]: {\n      maxWidth: '500px'\n    },\n    [theme.breakpoints.up('lg')]: {\n      maxWidth: '800px'\n    }\n  },\n  listItem: {\n    height: 90,\n    boxShadow: '0px 1px 0px 0px rgba(0,0,0,0.75)'\n  },\n  listText: {\n    margin: 'auto'\n  },\n  toolbar: {\n    display: 'none'\n  },\n  toolbarOpen: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    backgroundColor: '#618fe8',\n    height: 40,\n    maxWidth: '300px',\n    [theme.breakpoints.up('md')]: {\n      maxWidth: '500px'\n    },\n    [theme.breakpoints.up('lg')]: {\n      maxWidth: '800px'\n    }\n  }\n}));\nexport default function Profile() {\n  const classes = useStyles();\n\n  const _React$useState = React.useState(true),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        loggedIn = _React$useState2[0],\n        setLoggedIn = _React$useState2[1];\n\n  const _React$useState3 = React.useState(''),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        selectedIndex = _React$useState4[0],\n        setSelectedIndex = _React$useState4[1];\n\n  const _React$useState5 = React.useState(false),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        open = _React$useState6[0],\n        setOpen = _React$useState6[1];\n\n  const _React$useState7 = React.useState({\n    gilad: true,\n    jason: false,\n    antoine: true\n  }),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        state = _React$useState8[0],\n        setState = _React$useState8[1];\n\n  const handleChange = name => event => {\n    setState(_objectSpread({}, state, {\n      [name]: event.target.checked\n    }));\n  };\n\n  function handleListItemClick(event, index) {\n    setSelectedIndex(index);\n    setOpen(true);\n  }\n\n  function handleListClose() {\n    setOpen(false);\n  }\n\n  function logged() {\n    if (loggedIn !== true) {\n      return React.createElement(\"div\", {\n        className: \"profile-login-avatar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"Sign In/Log In\");\n    } else {\n      return React.createElement(\"div\", {\n        className: \"profile-avatar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Avatar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"H\"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, \"Username\"));\n    }\n  }\n\n  function settingsPageChange() {\n    if (selectedIndex === 'Display') {\n      return React.createElement(FormControl, {\n        component: \"fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(FormControlLabel, {\n        control: React.createElement(Switch, {\n          checked: state.gilad,\n          onChange: handleChange('gilad'),\n          value: \"gilad\",\n          color: \"#23d160\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }),\n        label: \"Dark Mode\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      })));\n    } else if (selectedIndex === 'Privacy') {\n      return React.createElement(FormControl, {\n        component: \"fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(FormControlLabel, {\n        control: React.createElement(Switch, {\n          checked: state.gilad,\n          onChange: handleChange('gilad'),\n          value: \"gilad\",\n          color: \"#23d160\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }),\n        label: \"Encrypt All Messages\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), React.createElement(FormControlLabel, {\n        control: React.createElement(Switch, {\n          checked: state.gilad,\n          onChange: handleChange('gilad'),\n          value: \"gilad\",\n          color: \"#23d160\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }),\n        label: \"Enable 30 Day Data Burn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      })));\n    } else if (selectedIndex === 'Notifications') {\n      return React.createElement(FormControl, {\n        component: \"fieldset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(FormControlLabel, {\n        control: React.createElement(Switch, {\n          checked: state.gilad,\n          onChange: handleChange('gilad'),\n          value: \"gilad\",\n          color: \"#23d160\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }),\n        label: \"Enable Notifications Sound\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }), React.createElement(FormControlLabel, {\n        control: React.createElement(Switch, {\n          checked: state.gilad,\n          onChange: handleChange('gilad'),\n          value: \"gilad\",\n          color: \"#23d160\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }),\n        label: \"Enable Unread Message Badge\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      })));\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, logged(), React.createElement(\"div\", {\n    onClick: handleListClose,\n    className: clsx(classes.toolbar, {\n      [classes.toolbarOpen]: open,\n      [classes.toolbar]: !open\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(IconButton, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(ChevronLeftIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }))), React.createElement(List, {\n    className: clsx(classes.list, {\n      [classes.listOpen]: open,\n      [classes.list]: !open\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, ['Display', 'Privacy', 'Notifications'].map((text, index) => React.createElement(ListItem, {\n    button: true,\n    key: text,\n    className: classes.listItem,\n    selected: selectedIndex === text,\n    onClick: event => handleListItemClick(event, text),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(ListItemText, {\n    className: classes.listText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, text)))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    component: \"fieldset\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(FormLabel, {\n    component: \"legend\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, \"Assign responsibility\"), React.createElement(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(FormControlLabel, {\n    control: React.createElement(Switch, {\n      checked: state.gilad,\n      onChange: handleChange('gilad'),\n      value: \"gilad\",\n      color: \"#23d160\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }),\n    label: \"Gilad Gray\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }), React.createElement(FormControlLabel, {\n    control: React.createElement(Switch, {\n      checked: state.jason,\n      onChange: handleChange('jason'),\n      value: \"jason\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }),\n    label: \"Jason Killian\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }), React.createElement(FormControlLabel, {\n    control: React.createElement(Switch, {\n      checked: state.antoine,\n      onChange: handleChange('antoine'),\n      value: \"antoine\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }),\n    label: \"Antoine Llorca\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  })))));\n}","map":{"version":3,"sources":["C:\\Users\\Dell\\messenger\\src\\profile-page\\profile.js"],"names":["React","makeStyles","Avatar","ListItem","ListItemText","List","clsx","ChevronLeftIcon","IconButton","FormLabel","FormControl","FormGroup","FormControlLabel","FormHelperText","Switch","useStyles","theme","root","margin","width","breakpoints","up","list","display","flexDirection","maxWidth","listOpen","transition","transitions","create","easing","sharp","duration","enteringScreen","listItem","height","boxShadow","listText","toolbar","toolbarOpen","alignItems","justifyContent","backgroundColor","Profile","classes","useState","loggedIn","setLoggedIn","selectedIndex","setSelectedIndex","open","setOpen","gilad","jason","antoine","state","setState","handleChange","name","event","target","checked","handleListItemClick","index","handleListClose","logged","settingsPageChange","map","text"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport './profile.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport List from '@material-ui/core/List';\r\nimport clsx from 'clsx';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        margin: 'auto',\r\n        width: '300px',\r\n        [theme.breakpoints.up('md')]: {\r\n            width: '500px',\r\n        },\r\n        [theme.breakpoints.up('lg')]: {\r\n            width: '800px',\r\n        },\r\n    },\r\n    list: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        width: '100%',\r\n        maxWidth: '300px',\r\n        [theme.breakpoints.up('md')]: {\r\n            maxWidth: '500px',\r\n        },\r\n        [theme.breakpoints.up('lg')]: {\r\n            maxWidth: '800px',\r\n        },\r\n    },\r\n    listOpen: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        width: '100%',\r\n        maxWidth: '300px',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        [theme.breakpoints.up('md')]: {\r\n            maxWidth: '500px',\r\n        },\r\n        [theme.breakpoints.up('lg')]: {\r\n            maxWidth: '800px',\r\n        },\r\n    },\r\n    listItem: {\r\n        height: 90,\r\n        boxShadow: '0px 1px 0px 0px rgba(0,0,0,0.75)',\r\n    },\r\n    listText: {\r\n        margin: 'auto',\r\n    },\r\n    toolbar: {\r\n        display: 'none',\r\n    },\r\n    toolbarOpen: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        backgroundColor: '#618fe8',\r\n        height: 40,\r\n        maxWidth: '300px',\r\n        [theme.breakpoints.up('md')]: {\r\n            maxWidth: '500px',\r\n        },\r\n        [theme.breakpoints.up('lg')]: {\r\n            maxWidth: '800px',\r\n        },\r\n    },\r\n}))\r\n\r\nexport default function Profile() {\r\n    const classes = useStyles();\r\n    const [loggedIn, setLoggedIn] = React.useState(true);\r\n    const [selectedIndex, setSelectedIndex] = React.useState('');\r\n    const [open, setOpen] = React.useState(false);\r\n    const [state, setState] = React.useState({\r\n        gilad: true,\r\n        jason: false,\r\n        antoine: true,\r\n    });\r\n\r\n    const handleChange = name => event => {\r\n        setState({ ...state, [name]: event.target.checked });\r\n    };\r\n\r\n    function handleListItemClick(event, index) {\r\n        setSelectedIndex(index);\r\n        setOpen(true);\r\n    }\r\n\r\n    function handleListClose() {\r\n        setOpen(false);\r\n    }\r\n\r\n    function logged() {\r\n        if (loggedIn !== true) {\r\n            return <div className=\"profile-login-avatar\">Sign In/Log In</div>\r\n        } else {\r\n            return <div className=\"profile-avatar\"><Avatar>H</Avatar>\r\n                <span>Username</span></div>\r\n        }\r\n    }\r\n\r\n    function settingsPageChange() {\r\n        if (selectedIndex === 'Display') {\r\n            return <FormControl component=\"fieldset\">\r\n                <FormGroup>\r\n                    <FormControlLabel\r\n                        control={<Switch checked={state.gilad} onChange={handleChange('gilad')} value=\"gilad\" color=\"#23d160\" />}\r\n                        label=\"Dark Mode\"\r\n                    />\r\n                </FormGroup>\r\n            </FormControl>\r\n        } else if (selectedIndex === 'Privacy') {\r\n            return <FormControl component=\"fieldset\">\r\n                <FormGroup>\r\n                    <FormControlLabel\r\n                        control={<Switch checked={state.gilad} onChange={handleChange('gilad')} value=\"gilad\" color=\"#23d160\" />}\r\n                        label=\"Encrypt All Messages\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={<Switch checked={state.gilad} onChange={handleChange('gilad')} value=\"gilad\" color=\"#23d160\" />}\r\n                        label=\"Enable 30 Day Data Burn\"\r\n                    />\r\n                </FormGroup>\r\n            </FormControl>\r\n        } else if (selectedIndex === 'Notifications') {\r\n            return <FormControl component=\"fieldset\">\r\n                <FormGroup>\r\n                    <FormControlLabel\r\n                        control={<Switch checked={state.gilad} onChange={handleChange('gilad')} value=\"gilad\" color=\"#23d160\" />}\r\n                        label=\"Enable Notifications Sound\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={<Switch checked={state.gilad} onChange={handleChange('gilad')} value=\"gilad\" color=\"#23d160\" />}\r\n                        label=\"Enable Unread Message Badge\"\r\n                    />\r\n                </FormGroup>\r\n            </FormControl>\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {logged()}\r\n            <div onClick={handleListClose} className={clsx(classes.toolbar, {\r\n                [classes.toolbarOpen]: open,\r\n                [classes.toolbar]: !open,\r\n            })}>\r\n                <IconButton >\r\n                    <ChevronLeftIcon />\r\n                </IconButton>\r\n            </div>\r\n            <List className={clsx(classes.list, {\r\n                [classes.listOpen]: open,\r\n                [classes.list]: !open,\r\n            })}>\r\n                {['Display', 'Privacy', 'Notifications'].map((text, index) => (\r\n                    <ListItem button key={text} className={classes.listItem} selected={selectedIndex === text}\r\n                        onClick={event => handleListItemClick(event, text)}>\r\n                        <ListItemText className={classes.listText} >{text}</ListItemText>\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n            <div>\r\n                <FormControl component=\"fieldset\">\r\n                    <FormLabel component=\"legend\">Assign responsibility</FormLabel>\r\n                    <FormGroup>\r\n                        <FormControlLabel\r\n                            control={<Switch checked={state.gilad} onChange={handleChange('gilad')} value=\"gilad\" color=\"#23d160\" />}\r\n                            label=\"Gilad Gray\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={<Switch checked={state.jason} onChange={handleChange('jason')} value=\"jason\" />}\r\n                            label=\"Jason Killian\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch checked={state.antoine} onChange={handleChange('antoine')} value=\"antoine\" />\r\n                            }\r\n                            label=\"Antoine Llorca\"\r\n                        />\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}